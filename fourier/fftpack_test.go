// Copyright Â©2018 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This is a translation and extension of the FFTPACK test
// functions by Paul N Swarztrauber, placed in the public
// domain at http://www.netlib.org/fftpack/.

package fourier

import (
	"math"
	"reflect"
	"testing"

	"github.com/gonum/floats"
)

func TestRfft(t *testing.T) {
	const tol = 1e-12
	for _, test := range rfftTests {
		work := make([]float64, 2*test.n)
		ifac := make([]int, 15)
		rffti(test.n, work, ifac)
		var failed bool
		if !floats.EqualApprox(work, test.wantiwork, 1e-6) {
			failed = true
			t.Errorf("unexpected work after call to rffti for n=%d", test.n)
		}
		if !reflect.DeepEqual(ifac, test.wantiifac) {
			failed = true
			t.Errorf("unexpected ifac after call to rffti for n=%d", test.n)
		}
		if failed {
			continue
		}

		modn := test.n % 2
		fn := float64(test.n)
		nm1 := test.n - 1
		x, y, xh := series(test.n)

		dt := 2 * math.Pi / fn
		ns2 := (test.n + 1) / 2
		if ns2 >= 2 {
			for k := 1; k < ns2; k++ { //eek
				var sum1, sum2 float64
				arg := float64(k) * dt
				for i := 0; i < test.n; i++ {
					arg1 := float64(i) * arg
					sum1 += x[i] * math.Cos(arg1)
					sum2 += x[i] * math.Sin(arg1)
				}
				y[2*k-1] = sum1
				y[2*k] = -sum2
			}
		}
		var sum1, sum2 float64
		for i := 0; i < nm1; i += 2 {
			sum1 += x[i]
			sum2 += x[i+1]
		}
		if modn == 1 {
			sum1 += x[test.n-1]
		}
		y[0] = sum1 + sum2
		if modn == 0 {
			y[test.n-1] = sum1 - sum2
		}

		rfftf(test.n, x, work, ifac)
		var rftf float64
		for i := 0; i < test.n; i++ {
			rftf = math.Max(rftf, math.Abs(x[i]-y[i]))
			x[i] = xh[i]
		}
		rftf /= fn
		if !floats.EqualWithinAbsOrRel(rftf, 0, tol, tol) {
			t.Errorf("unexpected rftf value for n=%d: got:%f want:0", test.n, rftf)
		}

		for i := 0; i < test.n; i++ {
			sum := x[0] / 2
			arg := float64(i) * dt
			if ns2 >= 2 {
				for k := 1; k < ns2; k++ { //eek
					arg1 := float64(k) * arg
					sum += x[2*k-1]*math.Cos(arg1) - x[2*k]*math.Sin(arg1)
				}
			}
			if modn == 0 {
				// This is how it was written in FFTPACK.
				sum += 0.5 * math.Pow(-1, float64(i)) * x[test.n-1]
			}
			y[i] = 2 * sum
		}
		rfftb(test.n, x, work, ifac)
		var rftb float64
		for i := 0; i < test.n; i++ {
			rftb = math.Max(rftb, math.Abs(x[i]-y[i]))
			x[i] = xh[i]
			y[i] = xh[i]
		}
		if !floats.EqualWithinAbsOrRel(rftb, 0, tol, tol) {
			t.Errorf("unexpected rftb value for n=%d: got:%f want:0", test.n, rftb)
		}

		rfftb(test.n, y, work, ifac)
		rfftf(test.n, y, work, ifac)
		cf := 1.0 / fn
		var rftfb float64
		for i := 0; i < test.n; i++ {
			rftfb = math.Max(rftfb, math.Abs(cf*y[i]-x[i]))
		}
		if !floats.EqualWithinAbsOrRel(rftfb, 0, tol, tol) {
			t.Errorf("unexpected rftfb value for n=%d: got:%f want:0", test.n, rftfb)
		}
	}
}

func series(n int) (x, y, xh []float64) {
	x = make([]float64, n)
	y = make([]float64, n)
	xh = make([]float64, n)
	for i := 0; i < n; i++ {
		x[i] = math.Sin(float64(i+1) * math.Sqrt2)
		y[i] = x[i]
		xh[i] = x[i]
	}
	return x, y, xh
}

var rfftTests = []struct {
	n int

	// The following two fields are added as there is no unit testing in
	// FFTPACK for RFFTI.
	//
	// wantiwork is obtained from the FFTPACK test.f with modification.
	// The W array is zeroed at each iteration and the first 2n elements
	// of W are printed after the call to RFFTI.
	wantiwork []float64
	// wantiifac is obtained from the FFTPACK rffti1.f with modification.
	// The IFAC array is zeroed at each iteration of test.f and the 15 elements
	// of IFAC are printed before RFFTI1 returns.
	wantiifac []int
}{
	{
		n: 120,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.9986295, 0.5233596E-01, 0.9945219, 0.1045285, 0.9876884, 0.1564345, 0.9781476, 0.2079117,
			0.9659258, 0.2588190, 0.9510565, 0.3090170, 0.9335804, 0.3583679, 0.9135454, 0.4067366,
			0.8910065, 0.4539905, 0.8660254, 0.5000000, 0.8386706, 0.5446391, 0.8090170, 0.5877852,
			0.7771459, 0.6293204, 0.7431448, 0.6691306, 0.7071068, 0.7071068, 0.6691306, 0.7431449,
			0.6293204, 0.7771460, 0.5877852, 0.8090170, 0.5446390, 0.8386706, 0.5000000, 0.8660254,
			0.4539905, 0.8910065, 0.4067366, 0.9135455, 0.3583679, 0.9335805, 0.3090170, 0.9510565,
			0.2588191, 0.9659258, 0.2079117, 0.9781476, 0.1564344, 0.9876884, 0.1045284, 0.9945219,
			0.5233597E-01, 0.9986295, 0.000000, 0.000000, 0.9945219, 0.1045285, 0.9781476, 0.2079117,
			0.9510565, 0.3090170, 0.9135454, 0.4067366, 0.8660254, 0.5000000, 0.8090170, 0.5877852,
			0.7431448, 0.6691306, 0.000000, 0.9781476, 0.2079117, 0.9135454, 0.4067366, 0.8090170,
			0.5877852, 0.6691306, 0.7431449, 0.5000000, 0.8660254, 0.3090170, 0.9510565, 0.1045284,
			0.9945219, 0.000000, 0.9510565, 0.3090170, 0.8090170, 0.5877852, 0.5877852, 0.8090170,
			0.3090170, 0.9510565, -0.4371139E-07, 1.000000, -0.3090170, 0.9510565, -0.5877852, 0.8090170,
			0.000000, 0.9135454, 0.4067366, 0.6691306, 0.7431449, 0.000000, 0.6691306, 0.7431449,
			-0.1045285, 0.9945219, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{120, 4, 2, 4, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 54,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.9932383, 0.1160929,
			0.9730449, 0.2306159, 0.9396926, 0.3420201, 0.8936327, 0.4487992, 0.8354878, 0.5495090,
			0.7660444, 0.6427876, 0.6862416, 0.7273737, 0.5971586, 0.8021232, 0.5000000, 0.8660254,
			0.3960797, 0.9182161, 0.2868032, 0.9579895, 0.1736482, 0.9848077, 0.5814485E-01, 0.9983082,
			0.000000, 0.9730449, 0.2306159, 0.8936327, 0.4487992, 0.7660444, 0.6427876, 0.5971586,
			0.8021232, 0.000000, 0.8936327, 0.4487992, 0.5971586, 0.8021232, 0.1736482, 0.9848077,
			-0.2868032, 0.9579895, 0.000000, 0.7660444, 0.6427876, 0.000000, 0.1736482, 0.9848077,
			0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{54, 4, 2, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 49,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.9917900, 0.1278772, 0.9672949, 0.2536546, 0.9269168, 0.3752670, 0.000000,
			0.9672949, 0.2536546, 0.8713187, 0.4907176, 0.7183493, 0.6956826, 0.000000, 0.9269168,
			0.3752670, 0.7183493, 0.6956826, 0.4047833, 0.9144127, 0.000000, 0.8713187, 0.4907176,
			0.5183925, 0.8551428, 0.3205151E-01, 0.9994862, 0.000000, 0.8014136, 0.5981106, 0.2845275,
			0.9586679, -0.3453652, 0.9384683, 0.000000, 0.7183493, 0.6956826, 0.3205151E-01, 0.9994862,
			-0.6723010, 0.7402779, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000,
		},
		wantiifac: []int{49, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 32,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.9807853, 0.1950903, 0.9238795, 0.3826835, 0.8314696, 0.5555702, 0.7071068, 0.7071068,
			0.5555702, 0.8314697, 0.3826834, 0.9238795, 0.1950902, 0.9807853, 0.000000, 0.000000,
			0.9238795, 0.3826835, 0.000000, 0.000000, 0.7071068, 0.7071068, 0.000000, 0.000000,
			0.3826834, 0.9238795, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{32, 3, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 4,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{4, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 3,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 2,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
}
